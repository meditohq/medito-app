// Autogenerated from Pigeon (v13.1.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

private fun createConnectionError(channelName: String): FlutterError {
  return FlutterError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Generated class from Pigeon that represents data sent in messages. */
data class AudioData (
  val url: String,
  val track: Track

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): AudioData {
      val url = list[0] as String
      val track = Track.fromList(list[1] as List<Any?>)
      return AudioData(url, track)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      url,
      track.toList(),
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PlaybackState (
  val isPlaying: Boolean,
  val isBuffering: Boolean,
  val isSeeking: Boolean,
  val isCompleted: Boolean,
  val position: Long,
  val duration: Long,
  val speed: Speed,
  val volume: Long,
  val track: Track,
  val backgroundSound: BackgroundSound? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PlaybackState {
      val isPlaying = list[0] as Boolean
      val isBuffering = list[1] as Boolean
      val isSeeking = list[2] as Boolean
      val isCompleted = list[3] as Boolean
      val position = list[4].let { if (it is Int) it.toLong() else it as Long }
      val duration = list[5].let { if (it is Int) it.toLong() else it as Long }
      val speed = Speed.fromList(list[6] as List<Any?>)
      val volume = list[7].let { if (it is Int) it.toLong() else it as Long }
      val track = Track.fromList(list[8] as List<Any?>)
      val backgroundSound: BackgroundSound? = (list[9] as List<Any?>?)?.let {
        BackgroundSound.fromList(it)
      }
      return PlaybackState(isPlaying, isBuffering, isSeeking, isCompleted, position, duration, speed, volume, track, backgroundSound)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      isPlaying,
      isBuffering,
      isSeeking,
      isCompleted,
      position,
      duration,
      speed.toList(),
      volume,
      track.toList(),
      backgroundSound?.toList(),
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class BackgroundSound (
  val uri: String? = null,
  val title: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): BackgroundSound {
      val uri = list[0] as String?
      val title = list[1] as String
      return BackgroundSound(uri, title)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      uri,
      title,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class Speed (
  val speed: Double

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): Speed {
      val speed = list[0] as Double
      return Speed(speed)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      speed,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class Track (
  val id: String,
  val title: String,
  val description: String,
  val imageUrl: String,
  val artist: String? = null,
  val artistUrl: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): Track {
      val id = list[0] as String
      val title = list[1] as String
      val description = list[2] as String
      val imageUrl = list[3] as String
      val artist = list[4] as String?
      val artistUrl = list[5] as String?
      return Track(id, title, description, imageUrl, artist, artistUrl)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      id,
      title,
      description,
      imageUrl,
      artist,
      artistUrl,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class CompletionData (
  val trackId: String,
  val duration: Long,
  val fileId: String,
  val guideId: String? = null,
  val timestamp: Long,
  val userToken: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): CompletionData {
      val trackId = list[0] as String
      val duration = list[1].let { if (it is Int) it.toLong() else it as Long }
      val fileId = list[2] as String
      val guideId = list[3] as String?
      val timestamp = list[4].let { if (it is Int) it.toLong() else it as Long }
      val userToken = list[5] as String?
      return CompletionData(trackId, duration, fileId, guideId, timestamp, userToken)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      trackId,
      duration,
      fileId,
      guideId,
      timestamp,
      userToken,
    )
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface MeditoAndroidAudioServiceManager {
  fun startService()

  companion object {
    /** The codec used by MeditoAndroidAudioServiceManager. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
    /** Sets up an instance of `MeditoAndroidAudioServiceManager` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: MeditoAndroidAudioServiceManager?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.medito.MeditoAndroidAudioServiceManager.startService", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.startService()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object MeditoAudioServiceApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AudioData.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          Track.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is AudioData -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is Track -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface MeditoAudioServiceApi {
  fun playAudio(audioData: AudioData): Boolean
  fun playPauseAudio()
  fun stopAudio()
  fun setSpeed(speed: Double)
  fun seekToPosition(position: Long)
  fun skip10SecondsForward()
  fun skip10SecondsBackward()
  fun setBackgroundSound(uri: String?)
  fun setBackgroundSoundVolume(volume: Double)
  fun stopBackgroundSound()
  fun playBackgroundSound()
  fun pauseBackgroundSound()

  companion object {
    /** The codec used by MeditoAudioServiceApi. */
    val codec: MessageCodec<Any?> by lazy {
      MeditoAudioServiceApiCodec
    }
    /** Sets up an instance of `MeditoAudioServiceApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: MeditoAudioServiceApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.medito.MeditoAudioServiceApi.playAudio", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val audioDataArg = args[0] as AudioData
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.playAudio(audioDataArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.medito.MeditoAudioServiceApi.playPauseAudio", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.playPauseAudio()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.medito.MeditoAudioServiceApi.stopAudio", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.stopAudio()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.medito.MeditoAudioServiceApi.setSpeed", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val speedArg = args[0] as Double
            var wrapped: List<Any?>
            try {
              api.setSpeed(speedArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.medito.MeditoAudioServiceApi.seekToPosition", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val positionArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              api.seekToPosition(positionArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.medito.MeditoAudioServiceApi.skip10SecondsForward", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.skip10SecondsForward()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.medito.MeditoAudioServiceApi.skip10SecondsBackward", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.skip10SecondsBackward()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.medito.MeditoAudioServiceApi.setBackgroundSound", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val uriArg = args[0] as String?
            var wrapped: List<Any?>
            try {
              api.setBackgroundSound(uriArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.medito.MeditoAudioServiceApi.setBackgroundSoundVolume", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val volumeArg = args[0] as Double
            var wrapped: List<Any?>
            try {
              api.setBackgroundSoundVolume(volumeArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.medito.MeditoAudioServiceApi.stopBackgroundSound", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.stopBackgroundSound()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.medito.MeditoAudioServiceApi.playBackgroundSound", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.playBackgroundSound()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.medito.MeditoAudioServiceApi.pauseBackgroundSound", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.pauseBackgroundSound()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object MeditoAudioServiceCallbackApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          BackgroundSound.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          CompletionData.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PlaybackState.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          Speed.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          Track.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is BackgroundSound -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is CompletionData -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is PlaybackState -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is Speed -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is Track -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class MeditoAudioServiceCallbackApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by MeditoAudioServiceCallbackApi. */
    val codec: MessageCodec<Any?> by lazy {
      MeditoAudioServiceCallbackApiCodec
    }
  }
  fun updatePlaybackState(stateArg: PlaybackState, callback: (Result<Unit>) -> Unit) {
    val channelName = "dev.flutter.pigeon.medito.MeditoAudioServiceCallbackApi.updatePlaybackState"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(stateArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun handleCompletedTrack(completionDataArg: CompletionData, callback: (Result<Boolean>) -> Unit) {
    val channelName = "dev.flutter.pigeon.medito.MeditoAudioServiceCallbackApi.handleCompletedTrack"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(completionDataArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else if (it[0] == null) {
          callback(Result.failure(FlutterError("null-error", "Flutter api returned null value for non-null return value.", "")))
        } else {
          val output = it[0] as Boolean
          callback(Result.success(output))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
