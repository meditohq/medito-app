def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new FileNotFoundException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def appMinSdkVersion = localProperties.getProperty('flutter.minSdkVersion').toInteger()
if (appMinSdkVersion == null) {
    appMinSdkVersion = 21
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 33
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    def keystoreProperties = new Properties()
    def keystorePropertiesFile = rootProject.file('keystore.properties')

    def configured = true
    try {
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    } catch (IOException e) {
        configured = false
    }

    project.ext {
        APP_ID = keystoreProperties['appId']
        KEYSTORE_STORE_FILE = configured ? rootProject.file(keystoreProperties['storeFile']) : null
        KEYSTORE_STORE_PASSWORD = keystoreProperties['storePassword']
        KEYSTORE_KEY_ALIAS = keystoreProperties['keyAlias']
        KEYSTORE_KEY_PASSWORD = keystoreProperties['keyPassword']
        VERSION_CODE = 1
        VERSION_NAME = flutterVersionName
    }

    defaultConfig {
        applicationId "meditofoundation.medito"
        minSdkVersion appMinSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    signingConfigs {
        release {
            if (System.getenv()["CI"]) { // CI=true is exported by Codemagic or GH Actions
                storeFile file(System.getenv()["FCI_KEYSTORE_PATH"])
                storePassword System.getenv()["FCI_KEYSTORE_PASSWORD"]
                keyAlias System.getenv()["FCI_KEY_ALIAS"]
                keyPassword System.getenv()["FCI_KEY_PASSWORD"]
            } else {
                storeFile project.KEYSTORE_STORE_FILE
                storePassword project.KEYSTORE_STORE_PASSWORD
                keyAlias project.KEYSTORE_KEY_ALIAS
                keyPassword project.KEYSTORE_KEY_PASSWORD
            }
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            shrinkResources false
        }
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.release
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
