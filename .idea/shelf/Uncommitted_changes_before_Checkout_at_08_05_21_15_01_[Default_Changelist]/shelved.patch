Index: lib/widgets/session_options/session_options_screen.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*This file is part of Medito App.\n\nMedito App is free software: you can redistribute it and/or modify\nit under the terms of the Affero GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nMedito App is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nAffero GNU General Public License for more details.\n\nYou should have received a copy of the Affero GNU General Public License\nalong with Medito App. If not, see <https://www.gnu.org/licenses/>.*/\n\nimport 'dart:io';\n\nimport 'package:Medito/audioplayer/player_utils.dart';\nimport 'package:Medito/network/api_response.dart';\nimport 'package:Medito/network/session_options/background_sounds.dart';\nimport 'package:Medito/network/session_options/session_options_bloc.dart';\nimport 'package:Medito/utils/colors.dart';\nimport 'package:Medito/utils/navigation.dart';\nimport 'package:Medito/utils/strings.dart';\nimport 'package:Medito/utils/utils.dart';\nimport 'package:Medito/viewmodel/cache.dart';\nimport 'package:Medito/widgets/header_widget.dart';\nimport 'package:Medito/widgets/player/player_button.dart';\nimport 'package:flutter/material.dart';\nimport 'package:flutter_email_sender/flutter_email_sender.dart';\nimport  'package:pedantic/pedantic.dart';\nimport 'package:url_launcher/url_launcher.dart';\n\nclass SessionOptionsScreen extends StatefulWidget {\n  final String id;\n  final Screen screenKey;\n\n  SessionOptionsScreen({Key key, this.id, this.screenKey}) : super(key: key);\n\n  @override\n  _SessionOptionsScreenState createState() => _SessionOptionsScreenState();\n}\n\nclass _SessionOptionsScreenState extends State<SessionOptionsScreen> {\n  //todo move this to the _bloc\n  bool showIndeterminateSpinner = false;\n\n  BuildContext scaffoldContext;\n  SessionOptionsBloc _bloc;\n\n  @override\n  void initState() {\n    super.initState();\n    _bloc = SessionOptionsBloc(widget.id, widget.screenKey);\n    _bloc.fetchOptions(widget.id);\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return StreamBuilder<String>(\n        stream: _bloc.primaryColourController.stream,\n        builder: (context, snapshot) {\n          var iconColor = snapshot.hasData\n              ? parseColor(snapshot.data)\n              : MeditoColors.darkMoon;\n\n          return RefreshIndicator(\n              onRefresh: () async {\n                await addToLog(\n                    'Session options view --- Pull to refresh');\n                return _bloc.fetchOptions(widget.id, skipCache: true);\n              },\n              child: Scaffold(\n                appBar: AppBar(\n                  actions: [\n                    IconButton(\n                        icon: Icon(Icons.bug_report_outlined),\n                        onPressed: _onBugPressed)\n                  ],\n                ),\n                floatingActionButton: _getPlayerButton(iconColor),\n                body: Builder(builder: (BuildContext context) {\n                  scaffoldContext = context;\n                  return SingleChildScrollView(\n                    physics: AlwaysScrollableScrollPhysics(),\n                    child: Stack(\n                      children: [\n                        Column(\n                          mainAxisSize: MainAxisSize.min,\n                          crossAxisAlignment: CrossAxisAlignment.start,\n                          children: <Widget>[\n                            _getHeaderWidget(),\n                            _buildVoiceRowWithTitle(),\n                            _buildSpacer(),\n                            ////////// spacer\n                            _buildTextHeaderForRow(DURATION),\n                            _buildSessionLengthRow(),\n                            _buildSpacer(),\n                            ////////// spacer\n                            _getBGMusicItems(),\n                            ////////// spacer\n                            _buildTextHeaderForRow(DOWNLOAD_SESSION),\n                            _buildTextHeaderForRow(\n                                _bloc.availableOfflineIndicatorText),\n                            _buildOfflineRow(),\n                            Container(height: 80)\n                          ],\n                        ),\n                      ],\n                    ),\n                  );\n                }),\n              ));\n        });\n  }\n\n  HeaderWidget _getHeaderWidget() {\n    return HeaderWidget(\n        primaryColorController: _bloc.primaryColourController,\n        titleController: _bloc.titleController,\n        coverController: _bloc.imageController,\n        backgroundImageController: _bloc.backgroundImageController,\n        descriptionController: _bloc.descController,\n        vertical: true);\n  }\n\n  Semantics _getPlayerButton(Color iconColor) {\n    return Semantics(\n      label: 'Play button',\n      child: PlayerButton(\n        onPressed: _onBeginTap,\n        primaryColor: iconColor,\n        child: SizedBox(\n          width: 24,\n          height: 24,\n          child: _getBeginButtonContent(),\n        ),\n      ),\n    );\n  }\n\n  Widget _getBGMusicItems() => StreamBuilder<bool>(\n      stream: _bloc.backgroundMusicShownController.stream,\n      initialData: true,\n      builder: (context, snapshot) {\n        if (snapshot.hasData && snapshot.data) {\n          return Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              _buildTextHeaderForRow(BACKGROUND_SOUND),\n              buildBackgroundMusicRowAndSpacer(),\n              _buildSpacer(),\n            ],\n          );\n        } else {\n          return Container();\n        }\n      });\n\n  Widget _getBeginButtonContent() {\n    return StreamBuilder<String>(\n        stream: _bloc.secondaryColorController.stream,\n        initialData: null,\n        builder: (context, snapshot) {\n          var iconColor = snapshot.data;\n\n          if (_bloc.isDownloading()) {\n            return ValueListenableBuilder(\n                valueListenable: _bloc.downloadSingleton.returnNotifier(),\n                builder: (context, value, widget) {\n                  if (value >= 1) {\n                    return Icon(Icons.play_arrow, color: parseColor(iconColor));\n                  } else {\n                    print('Updated value: ' + (value * 100).toInt().toString());\n                    return SizedBox(\n                      height: 12,\n                      width: 12,\n                      child: Stack(\n                        children: [\n                          CircularProgressIndicator(\n                            value: 1,\n                            valueColor:\n                                AlwaysStoppedAnimation<Color>(Colors.black12),\n                          ),\n                          CircularProgressIndicator(\n                              value: value,\n                              valueColor: AlwaysStoppedAnimation<Color>(\n                                  parseColor(iconColor))),\n                        ],\n                      ),\n                    );\n                  }\n                });\n          } else if (showIndeterminateSpinner || _bloc.removing) {\n            return SizedBox(\n              height: 24,\n              width: 24,\n              child: CircularProgressIndicator(\n                  valueColor:\n                      AlwaysStoppedAnimation<Color>(parseColor(iconColor))),\n            );\n          } else {\n            return Icon(Icons.play_arrow, color: parseColor(iconColor));\n          }\n        });\n  }\n\n  Future<void> _onBeginTap() {\n    if (_bloc.isDownloading() || showIndeterminateSpinner) return null;\n\n    _bloc.saveOptionsSelectionsToSharedPreferences(widget.id);\n\n    _bloc.startAudioService();\n\n    NavigationFactory.navigate(context, Screen.player, id: widget.id);\n\n    //shows a spinner just while the next screen is preparing itself\n    setState(() {\n      showIndeterminateSpinner = true;\n      Future.delayed(const Duration(milliseconds: 3000), () {\n        setState(() {\n          showIndeterminateSpinner = false;\n        });\n      });\n    });\n\n    return null;\n  }\n\n  /// Pill rows\n  Widget _buildTextHeaderForRow(String title) {\n    return Padding(\n      padding: const EdgeInsets.only(left: 16, right: 16),\n      child: Text(\n        title.toUpperCase(),\n        style: Theme.of(context).textTheme.caption,\n      ),\n    );\n  }\n\n  Widget _buildSessionLengthRow() {\n    return StreamBuilder<ApiResponse<List<String>>>(\n        stream: _bloc.lengthListController.stream,\n        builder: (context, snapshot) {\n          if (!snapshot.hasData || snapshot.data?.status == Status.LOADING) {\n            return _getEmptyPillRow();\n          }\n\n          return SizedBox(\n            height: 56,\n            child: ListView.builder(\n              padding: const EdgeInsets.only(left: 16),\n              shrinkWrap: true,\n              itemCount: snapshot.data.body?.length ?? 0,\n              scrollDirection: Axis.horizontal,\n              itemBuilder: (BuildContext context, int index) {\n                if (snapshot.data.status == Status.LOADING) {\n                  return _getEmptyPillRow();\n                }\n\n                return Padding(\n                  padding: buildInBetweenChipPadding(index),\n                  child: FilterChip(\n                    pressElevation: 4,\n                    shape: buildChipBorder(),\n                    showCheckmark: false,\n                    labelPadding: buildInnerChipPadding(),\n                    label: Text(snapshot.data?.body[index]),\n                    selected: _bloc.lengthSelected == index,\n                    onSelected: (bool value) {\n                      onSessionLengthPillTap(index);\n                    },\n                    backgroundColor: MeditoColors.moonlight,\n                    selectedColor: MeditoColors.walterWhite,\n                    labelStyle: getLengthPillTextStyle(context, index),\n                  ),\n                );\n              },\n            ),\n          );\n        });\n  }\n\n  Widget _buildOfflineRow() {\n    return SizedBox(\n      height: 56,\n      child: ListView.builder(\n        padding: const EdgeInsets.only(left: 16),\n        shrinkWrap: true,\n        itemCount: 2,\n        scrollDirection: Axis.horizontal,\n        itemBuilder: (BuildContext context, int index) {\n          return Padding(\n            padding: buildInBetweenChipPadding(index),\n            child: FilterChip(\n              pressElevation: 4,\n              shape: buildChipBorder(),\n              showCheckmark: false,\n              labelPadding: buildInnerChipPadding(),\n              label: Text(index == 0 ? 'No' : 'Yes'),\n              selected: _bloc.offlineSelected == index,\n              onSelected: (bool value) {\n                !showIndeterminateSpinner ? onOfflineSelected(index) : null;\n              },\n              backgroundColor: MeditoColors.moonlight,\n              selectedColor: MeditoColors.walterWhite,\n              labelStyle: getOfflinePillTextStyle(context, index),\n            ),\n          );\n        },\n      ),\n    );\n  }\n\n  Widget buildBackgroundMusicRowAndSpacer() {\n    return SizedBox(\n        height: 56,\n        child: StreamBuilder<ApiResponse<BackgroundSoundsResponse>>(\n            stream: _bloc.backgroundMusicListController.stream,\n            initialData: ApiResponse.loading(),\n            builder: (context, snapshot) {\n              if (!snapshot.hasData ||\n                  snapshot.data?.status == Status.LOADING) {\n                return _getEmptyPillRow();\n              }\n\n              var data = snapshot.data.body?.data;\n\n              if (data?.isEmpty ?? true) return Container();\n\n              return ListView.builder(\n                padding: const EdgeInsets.only(left: 16, right: 16),\n                shrinkWrap: true,\n                itemCount: 1 + (data.length ?? 0),\n                scrollDirection: Axis.horizontal,\n                itemBuilder: (BuildContext context, int index) {\n                  return Padding(\n                    padding: buildInBetweenChipPadding(index),\n                    child: FilterChip(\n                      pressElevation: 4,\n                      shape: buildChipBorder(),\n                      labelPadding: buildInnerChipPadding(),\n                      showCheckmark: false,\n                      label: Text(index == 0 ? 'None' : data[index - 1].name),\n                      selected: index == _bloc.bgSoundSelectedIndex,\n                      onSelected: (bool value) {\n                        onMusicSelected(\n                            index,\n                            index > 0 ? data[index - 1].file : '',\n                            index > 0 ? data[index - 1].name : '');\n                      },\n                      backgroundColor: MeditoColors.moonlight,\n                      selectedColor: MeditoColors.walterWhite,\n                      labelStyle: getMusicPillTextStyle(index),\n                    ),\n                  );\n                },\n              );\n            }));\n  }\n\n  Widget _buildVoiceRowWithTitle() {\n    return StreamBuilder<ApiResponse<List<String>>>(\n        stream: _bloc.voiceListController.stream,\n        builder: (context, snapshot) {\n          if (!snapshot.hasData || snapshot.data?.status == Status.LOADING) {\n            return _buildVoiceColumn(_getEmptyPillRow());\n          }\n\n          if (snapshot.data.body.isEmpty || snapshot.data.body.first == null) {\n            return Container();\n          }\n\n          return _buildVoiceColumn(\n            ListView.builder(\n              padding: const EdgeInsets.only(left: 16),\n              shrinkWrap: true,\n              scrollDirection: Axis.horizontal,\n              itemCount: snapshot.data.body.length,\n              itemBuilder: (BuildContext context, int index) {\n                return Padding(\n                  padding: buildInBetweenChipPadding(index),\n                  child: FilterChip(\n                    shape: buildChipBorder(),\n                    labelPadding: buildInnerChipPadding(),\n                    label: Text(snapshot.data.body[index]),\n                    showCheckmark: false,\n                    selected: _bloc.voiceSelected == index,\n                    onSelected: (bool value) {\n                      onVoicePillTap(value, index);\n                    },\n                    backgroundColor: MeditoColors.moonlight,\n                    selectedColor: MeditoColors.walterWhite,\n                    labelStyle: getVoiceTextStyle(context, index),\n                  ),\n                );\n              },\n            ),\n          );\n        });\n  }\n\n  Column _buildVoiceColumn(Widget w) {\n    return Column(\n      crossAxisAlignment: CrossAxisAlignment.start,\n      children: [\n        Container(height: 16),\n        _buildTextHeaderForRow(NARRATOR),\n        SizedBox(height: 56, child: w),\n      ],\n    );\n  }\n\n  ///End pill rows\n\n  /// On tap functions\n  Future<void> onVoicePillTap(bool value, int index) async {\n    _bloc.voiceSelected = index;\n\n    _bloc.filterLengthsForVoice(voiceIndex: index);\n    await _bloc.updateCurrentFile();\n\n    if (mounted) {\n      setState(() {});\n    }\n  }\n\n  Future<void> onSessionLengthPillTap(int index) async {\n    _bloc.lengthSelected = index;\n\n    await _bloc.updateCurrentFile();\n\n    if (mounted) {\n      setState(() {});\n    }\n  }\n\n  Future<void> onMusicSelected(int index, String id, String name) async {\n    _bloc.bgSoundSelectedIndex = index;\n    await _bloc.updateCurrentFile();\n    print('bg selected: $name');\n    if (index > 0) {\n      showIndeterminateSpinner = true;\n      unawaited(downloadBGMusicFromURL(id, name).then((value) {\n        showIndeterminateSpinner = false;\n        _bloc.backgroundSoundsPath = value;\n        setState(() {});\n      }).catchError((onError) {\n        print(onError);\n        showIndeterminateSpinner = false;\n        _bloc.bgSoundSelectedIndex = 0;\n        _bloc.backgroundSoundsPath = null;\n      }));\n    } else {\n      showIndeterminateSpinner = false;\n      _bloc.bgSoundSelectedIndex = 0;\n      _bloc.backgroundSoundsPath = null;\n    }\n    setState(() {});\n  }\n\n  void onOfflineSelected(int index) {\n    _bloc.offlineSelected = index;\n\n    if (index == 1) {\n      // 'YES' selected\n      if (!_bloc.downloadSingleton.isDownloadingSomething()) {\n        _bloc.downloadSingleton\n            .start(_bloc.currentFile, _bloc.getMediaItemForSelectedFile());\n      } else {\n        _bloc.offlineSelected = 0;\n        createSnackBarWithColor('Another Download in Progress', scaffoldContext,\n            MeditoColors.peacefulBlue);\n      }\n    } else {\n      // 'NO' selected\n      _bloc.removeFile(_bloc.getMediaItemForSelectedFile()).then((onValue) {\n        print('Removed file');\n        _bloc.removing = false;\n        _bloc.updateCurrentFile();\n        setState(() {});\n      }).catchError((onError) {\n        print(onError);\n        _bloc.offlineSelected = 0;\n        setState(() {});\n      });\n    }\n    setState(() {});\n  }\n\n  /// End on tap functions\n\n  EdgeInsets buildInnerChipPadding() =>\n      EdgeInsets.only(left: 12, top: 4, bottom: 4, right: 12);\n\n  EdgeInsets buildInBetweenChipPadding(var index) {\n    var leftPadding = index == 0 ? 0.0 : 0.0;\n    return EdgeInsets.only(right: 8, left: leftPadding);\n  }\n\n  RoundedRectangleBorder buildChipBorder() {\n    return RoundedRectangleBorder(\n        borderRadius: BorderRadius.all(Radius.circular(12)));\n  }\n\n  TextStyle getLengthPillTextStyle(BuildContext context, int index) {\n    return Theme.of(context).textTheme.subtitle2.copyWith(\n        color: _bloc.lengthSelected == index\n            ? MeditoColors.darkBGColor\n            : MeditoColors.walterWhite);\n  }\n\n  TextStyle getOfflinePillTextStyle(BuildContext context, int index) {\n    return Theme.of(context).textTheme.subtitle2.copyWith(\n        color: _bloc.offlineSelected == index\n            ? MeditoColors.darkBGColor\n            : MeditoColors.walterWhite);\n  }\n\n  TextStyle getMusicPillTextStyle(int index) {\n    return Theme.of(context).textTheme.subtitle2.copyWith(\n        color: _bloc.bgSoundSelectedIndex == index\n            ? MeditoColors.darkBGColor\n            : MeditoColors.walterWhite);\n  }\n\n  TextStyle getVoiceTextStyle(BuildContext context, int index) {\n    return Theme.of(context).textTheme.subtitle2.copyWith(\n        color: _bloc.voiceSelected == index\n            ? MeditoColors.darkBGColor\n            : MeditoColors.walterWhite);\n  }\n\n  Padding _getEmptyPillRow() {\n    return Padding(\n      padding: const EdgeInsets.only(left: 16.0, top: 4),\n      child: Row(\n        children: [\n          _emptyPill(),\n          _emptyPill(),\n        ],\n      ),\n    );\n  }\n\n  Widget _emptyPill() {\n    return Padding(\n      padding: const EdgeInsets.only(right: 8.0),\n      child: FilterChip(\n        onSelected: (bool value) {},\n        pressElevation: 4,\n        shape: buildChipBorder(),\n        labelPadding: buildInnerChipPadding(),\n        label: Text('        '),\n        backgroundColor: MeditoColors.moonlight,\n        labelStyle: getLengthPillTextStyle(context, 1),\n      ),\n    );\n  }\n\n  Widget _buildSpacer() {\n    return Padding(\n      padding: const EdgeInsets.only(top: 12, bottom: 16),\n      child: Divider(\n        height: 1,\n        color: MeditoColors.deepNight,\n        thickness: 1,\n      ),\n    );\n  }\n\n  Future<void> _onBugPressed() async {\n    var s = await readJSONFromCache('loglog');\n    print(s);\n    final email = Email(\n      body: s,\n      subject: 'Debugging details',\n      recipients: ['hi@meditofoundation.org'],\n      isHTML: false,\n    );\n\n    await FlutterEmailSender.send(email);\n\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib/widgets/session_options/session_options_screen.dart	(revision bee5343e4682938c657fab4c7e7b45748e6288dc)
+++ lib/widgets/session_options/session_options_screen.dart	(date 1620478407000)
@@ -29,7 +29,6 @@
 import 'package:flutter/material.dart';
 import 'package:flutter_email_sender/flutter_email_sender.dart';
 import  'package:pedantic/pedantic.dart';
-import 'package:url_launcher/url_launcher.dart';
 
 class SessionOptionsScreen extends StatefulWidget {
   final String id;
